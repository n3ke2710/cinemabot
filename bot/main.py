import logging
import asyncio
from typing import Dict

from aiogram import types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from config import bot, dp
from handlers.reqs.tmdb.tmdb import search_movie, get_top_movies
from handlers.markup.keyboard_markup_constructor import construct_keyboard_markup
from handlers.reqs.search_href.search import search_first_result
from handlers.reqs.hug_chat_reqs.hug_chat_request import (
	search_movie_by_description,
)
from stats.db_config import Stats

stats = Stats()

logging.basicConfig(level=logging.INFO)
is_series_status: Dict[int, bool] = {}


@dp.message(Command("start"))
async def start(message: Message):
	await message.answer("Welcome! Use /switch_mode to search for a series.")


@dp.message(Command("liked_movies"))
async def get_liked(message: Message):
	await message.answer("Fetching your liked movies...")
	user_id = message.chat.id
	liked_movies = stats.watch_liked_movies(user_id)
	if liked_movies:
		await message.answer("Your liked movies:\n" + "\n".join(liked_movies))
	else:
		await message.answer("You have no liked movies.")


@dp.message(Command("switch_mode"))
async def switch_mode(message: Message):
	chat_id = message.chat.id
	is_series_status[chat_id] = not is_series_status.get(chat_id, False)
	mode = "series" if is_series_status[chat_id] else "films"
	antimode = "films" if is_series_status[chat_id] else "series"
	await message.answer(
		f"Switched to {mode} mode. Use /switch_mode to search for a {antimode}."
	)


@dp.message(Command("history"))
async def show_history(message: Message):
	user_id = message.chat.id
	history = stats.get_request_history(user_id)
	if history:
		history_text = "\n".join(
			[f"{timestamp}: {query}" for query, timestamp in history]
		)
		await message.answer(f"–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n{history_text}")
	else:
		await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")


@dp.message(Command("top_movies"))
async def top_movies(message: Message):
	movies = await get_top_movies()
	if movies:
		response = "üé• <b>–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤:</b>\n\n"
		for i, movie in enumerate(movies, start=1):
			response += (
				f"{i}. <b>{movie['title']}</b> "
				f"({movie.get('release_date', 'N/A')})\n"
			)
		await message.answer(response, parse_mode="HTML")
	else:
		await message.answer(
			"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		)


@dp.message(Command("search_by_description"))
async def search_by_description(message: Message):
	description = message.get_args()
	if not description:
		await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
		return

	result = await search_movie_by_description(description)
	if result:
		await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∏–ª—å–º:\n\n{result}")
	else:
		await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("popular_movies"))
async def popular_movies(message: Message):
	top_queries = stats.get_top_queries()
	if top_queries:
		response = "üé• <b>–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
		for i, (query, count) in enumerate(top_queries, start=1):
			response += f"{i}. <b>{query}</b> ‚Äî {count} —Ä–∞–∑(–∞)\n"
		await message.answer(response, parse_mode="HTML")
	else:
		await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")


@dp.message(Command("menu"))
async def menu(message: Message):
	keyboard = InlineKeyboardMarkup()
	keyboard.add(
		InlineKeyboardButton("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã", callback_data="popular_movies")
	)
	await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query(lambda callback: callback.data == "popular_movies")
async def show_popular_movies(callback_query: types.CallbackQuery):
	top_queries = stats.get_top_queries()
	if top_queries:
		response = "üé• <b>–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
		for i, (query, count) in enumerate(top_queries, start=1):
			response += f"{i}. <b>{query}</b> ‚Äî {count} —Ä–∞–∑(–∞)\n"
		await callback_query.message.edit_text(response, parse_mode="HTML")
	else:
		await callback_query.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")


@dp.message(Command("help"))
async def help_command(message: Message):
	help_text = (
		"üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
		"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
		"/top_movies - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n"
		"/search_by_description <–æ–ø–∏—Å–∞–Ω–∏–µ> - –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
		"/liked_movies - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ñ–∏–ª—å–º–æ–≤\n"
		"/switch_mode - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (—Ñ–∏–ª—å–º—ã/—Å–µ—Ä–∏–∞–ª—ã)\n"
		"/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
		"/popular_movies - –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
		"/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
	)
	await message.answer(help_text, parse_mode="HTML")


async def show_film_card(
	chat_id: int, film_data: dict, is_series: bool = False
) -> None:
	poster_url = (
		f"https://image.tmdb.org/t/p/w500{film_data['poster_path']}"
		if film_data.get("poster_path")
		else None
	)

	rating = film_data.get("vote_average", 0)
	full_stars = int(rating // 2)
	half_star = 1 if (rating / 2 - full_stars) >= 0.5 else 0
	empty_stars = 5 - full_stars - half_star
	stars = "‚≠ê" * full_stars + "üí´" * half_star + "‚òÜ" * empty_stars

	watch_link = search_first_result(
		film_data.get("title" if not is_series else "name", ""),
		is_series=is_series_status.get(chat_id, False),
	)
	answer_text = (
		f"üé¨ <b>{film_data.get('title' if not is_series else 'name', 'N/A')}</b>\n\n"
		f"‚≠ê <b>Rating:</b> {film_data.get('vote_average', 'N/A')} {stars}\n"
		f"üìÖ <b>Date:</b> {film_data.get('release_date' if not is_series else 'first_air_date', 'N/A')}\n"
		f"----------------------------------------------\n"
		f"\n"
		f"üìù <b>Description:</b> {film_data.get('overview', 'N/A')}\n"
		f"----------------------------------------------\n"
		f'üîó <b>Watch now:</b> <a href="{watch_link}">Click here to watch</a>'
	)

	if poster_url:
		await bot.send_photo(
			chat_id=chat_id,
			photo=poster_url,
			caption=answer_text,
			parse_mode="HTML",
			reply_markup=construct_keyboard_markup(),
		)
	else:
		await bot.send_message(chat_id=chat_id, text=answer_text, parse_mode="HTML")


@dp.message(lambda message: message.text in ["‚è≠", "‚ù§Ô∏è", "üé•"])
async def handle_movie_actions(message: Message):
	if message.text == "‚ù§Ô∏è":
		user_id = message.chat.id
		movie_title = "Unknown"
		if message.reply_to_message:
			if message.reply_to_message.caption:
				movie_title = message.reply_to_message.caption.split("\n")[0]
			elif message.reply_to_message.text:
				movie_title = message.reply_to_message.text.split("\n")[0]
		stats.save_liked_movie(user_id, movie_title)
		await message.answer("You liked the movie!")
	elif message.text == "üé•":
		await message.answer("You want to watch the movie!")
	elif message.text == "‚è≠":
		await message.answer("You want to skip the movie!")


@dp.message()
async def find_film(message: Message):
	if message.text:
		user_id = message.chat.id
		query = message.text
		stats.save_request(user_id, query)
		result = await search_movie(
			query, is_series=is_series_status.get(user_id, False)
		)
		if result and result.get("results"):
			await show_film_card(
				user_id,
				result["results"][0],
				is_series=is_series_status.get(user_id, False),
			)
		else:
			await message.answer("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
	else:
		await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")


@dp.errors_handler()
async def handle_errors(update, exception):
	logging.error(f"–û—à–∏–±–∫–∞: {exception}")
	return True


async def main():
	await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
	asyncio.run(main())
