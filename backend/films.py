import os
import asyncio

from aiogram import Bot, Dispatcher, types  # type: ignore
from aiogram.filters import Command  # type: ignore
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F

import sqlite3

from dotenv import load_dotenv  # type: ignore
import imdb  # type: ignore

from config import ia  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ia –∏–∑ config
from markup import get_movie_keyboard

async def search(message: types.Message, text=None, shift=0):
    if text is None:
        text = message.text
    query = text  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.")
        return

    # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
    results = ia.search_movie(query)
   
   
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not isinstance(message.chat.id, int):
        raise TypeError("Chat id is not integer")
    db_path = f"./backend/temp/{message.chat.id}/movies.db"
    os.makedirs(os.path.dirname(db_path), exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    try:
        os.remove(db_path)
    except FileNotFoundError:
        pass
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS movies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            year TEXT,
            imdb_id TEXT UNIQUE
        )
    ''')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    for movie in results:
        title = movie.get('title', 'Unknown')
        year = movie.get('year', 'Unknown')
        imdb_id = movie.movieID
        try:
            cursor.execute('''
                INSERT OR IGNORE INTO movies (title, year, imdb_id)
                VALUES (?, ?, ?)
            ''', (title, year, imdb_id))
        except sqlite3.Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞ {title}: {e}")

    conn.commit()
    conn.close()
    
    builder = await get_movie_keyboard(message)
    if results:
        builder.adjust(1)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:", reply_markup=builder.as_markup())
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")


async def give_result_page(message: types.Message, title: str):
    db_path = f"./backend/temp/{message.chat.id}/movies.db"
    if not os.path.exists(db_path):
        await message.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ò—â–µ–º —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    cursor.execute('''
        SELECT title, year, imdb_id FROM movies WHERE title LIKE ?
    ''', (f"%{title}%",))
    results_title = cursor.fetchall()
    conn.close()

    if results_title:
        response = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n"
        for result in results_title:
            movie_title, year, imdb_id = result
            response += f"üé¨ {movie_title} ({year})\nIMDB: https://www.imdb.com/title/tt{imdb_id}/\n\n"
        builder = await get_movie_keyboard(message)
        builder.adjust(1)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º builder –≤ InlineKeyboardMarkup
        await message.answer(response, reply_markup=builder.as_markup())
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")